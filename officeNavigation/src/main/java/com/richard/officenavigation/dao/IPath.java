package com.richard.officenavigation.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table IPATH.
 */
public class IPath {

    private Long id;
    private long from;
    private long to;
    private long distance;
    private long mapId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient IPathDao myDao;

    private INode target;
    private Long target__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public IPath() {
    }

    public IPath(Long id) {
        this.id = id;
    }

    public IPath(Long id, long from, long to, long distance, long mapId) {
        this.id = id;
        this.from = from;
        this.to = to;
        this.distance = distance;
        this.mapId = mapId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIPathDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getFrom() {
        return from;
    }

    public void setFrom(long from) {
        this.from = from;
    }

    public long getTo() {
        return to;
    }

    public void setTo(long to) {
        this.to = to;
    }

    public long getDistance() {
        return distance;
    }

    public void setDistance(long distance) {
        this.distance = distance;
    }

    public long getMapId() {
        return mapId;
    }

    public void setMapId(long mapId) {
        this.mapId = mapId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public INode getTarget() {
        long __key = this.to;
        if (target__resolvedKey == null || !target__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            INodeDao targetDao = daoSession.getINodeDao();
            INode targetNew = targetDao.load(__key);
            synchronized (this) {
                target = targetNew;
                target__resolvedKey = __key;
            }
        }
        return target;
    }

    public void setTarget(INode target) {
        if (target == null) {
            throw new DaoException("To-one property 'to' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.target = target;
            to = target.getId();
            target__resolvedKey = to;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
