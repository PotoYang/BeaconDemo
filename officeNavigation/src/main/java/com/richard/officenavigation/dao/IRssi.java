package com.richard.officenavigation.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table IRSSI.
 */
public class IRssi {

    private Long id;
    private long nodeId;
    private long beaconId;
    private double value;
    private double probability;
    private int total;
    private int orientation;
    private long mapId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient IRssiDao myDao;

    private IBeacon beacon;
    private Long beacon__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public IRssi() {
    }

    public IRssi(Long id) {
        this.id = id;
    }

    public IRssi(Long id, long nodeId, long beaconId, double value, double probability, int total, int orientation, long mapId) {
        this.id = id;
        this.nodeId = nodeId;
        this.beaconId = beaconId;
        this.value = value;
        this.probability = probability;
        this.total = total;
        this.orientation = orientation;
        this.mapId = mapId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIRssiDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getNodeId() {
        return nodeId;
    }

    public void setNodeId(long nodeId) {
        this.nodeId = nodeId;
    }

    public long getBeaconId() {
        return beaconId;
    }

    public void setBeaconId(long beaconId) {
        this.beaconId = beaconId;
    }

    public double getValue() {
        return value;
    }

    public void setValue(double value) {
        this.value = value;
    }

    public double getProbability() {
        return probability;
    }

    public void setProbability(double probability) {
        this.probability = probability;
    }

    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public int getOrientation() {
        return orientation;
    }

    public void setOrientation(int orientation) {
        this.orientation = orientation;
    }

    public long getMapId() {
        return mapId;
    }

    public void setMapId(long mapId) {
        this.mapId = mapId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public IBeacon getBeacon() {
        long __key = this.beaconId;
        if (beacon__resolvedKey == null || !beacon__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            IBeaconDao targetDao = daoSession.getIBeaconDao();
            IBeacon beaconNew = targetDao.load(__key);
            synchronized (this) {
                beacon = beaconNew;
                beacon__resolvedKey = __key;
            }
        }
        return beacon;
    }

    public void setBeacon(IBeacon beacon) {
        if (beacon == null) {
            throw new DaoException("To-one property 'beaconId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.beacon = beacon;
            beaconId = beacon.getId();
            beacon__resolvedKey = beaconId;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
