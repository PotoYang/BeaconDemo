package com.richard.officenavigation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table IRSSI.
 */
public class IRssiDao extends AbstractDao<IRssi, Long> {

    public static final String TABLENAME = "IRSSI";
    private DaoSession daoSession;

    ;
    private Query<IRssi> iNode_RssisQuery;
    private String selectDeep;

    public IRssiDao(DaoConfig config) {
        super(config);
    }

    public IRssiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'IRSSI' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NODE_ID' INTEGER NOT NULL ," + // 1: nodeId
                "'BEACON_ID' INTEGER NOT NULL ," + // 2: beaconId
                "'VALUE' REAL NOT NULL ," + // 3: value
                "'PROBABILITY' REAL NOT NULL ," + // 4: probability
                "'TOTAL' INTEGER NOT NULL ," + // 5: total
                "'ORIENTATION' INTEGER NOT NULL ," + // 6: orientation
                "'MAP_ID' INTEGER NOT NULL );"); // 7: mapId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IRSSI'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, IRssi entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNodeId());
        stmt.bindLong(3, entity.getBeaconId());
        stmt.bindDouble(4, entity.getValue());
        stmt.bindDouble(5, entity.getProbability());
        stmt.bindLong(6, entity.getTotal());
        stmt.bindLong(7, entity.getOrientation());
        stmt.bindLong(8, entity.getMapId());
    }

    @Override
    protected void attachEntity(IRssi entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public IRssi readEntity(Cursor cursor, int offset) {
        IRssi entity = new IRssi( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // nodeId
                cursor.getLong(offset + 2), // beaconId
                cursor.getDouble(offset + 3), // value
                cursor.getDouble(offset + 4), // probability
                cursor.getInt(offset + 5), // total
                cursor.getInt(offset + 6), // orientation
                cursor.getLong(offset + 7) // mapId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, IRssi entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNodeId(cursor.getLong(offset + 1));
        entity.setBeaconId(cursor.getLong(offset + 2));
        entity.setValue(cursor.getDouble(offset + 3));
        entity.setProbability(cursor.getDouble(offset + 4));
        entity.setTotal(cursor.getInt(offset + 5));
        entity.setOrientation(cursor.getInt(offset + 6));
        entity.setMapId(cursor.getLong(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(IRssi entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(IRssi entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "rssis" to-many relationship of INode.
     */
    public List<IRssi> _queryINode_Rssis(long nodeId) {
        synchronized (this) {
            if (iNode_RssisQuery == null) {
                QueryBuilder<IRssi> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NodeId.eq(null));
                iNode_RssisQuery = queryBuilder.build();
            }
        }
        Query<IRssi> query = iNode_RssisQuery.forCurrentThread();
        query.setParameter(0, nodeId);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getIBeaconDao().getAllColumns());
            builder.append(" FROM IRSSI T");
            builder.append(" LEFT JOIN IBEACON T0 ON T.'BEACON_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected IRssi loadCurrentDeep(Cursor cursor, boolean lock) {
        IRssi entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        IBeacon beacon = loadCurrentOther(daoSession.getIBeaconDao(), cursor, offset);
        if (beacon != null) {
            entity.setBeacon(beacon);
        }

        return entity;
    }

    public IRssi loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<IRssi> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<IRssi> list = new ArrayList<IRssi>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<IRssi> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<IRssi> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity IRssi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NodeId = new Property(1, long.class, "nodeId", false, "NODE_ID");
        public final static Property BeaconId = new Property(2, long.class, "beaconId", false, "BEACON_ID");
        public final static Property Value = new Property(3, double.class, "value", false, "VALUE");
        public final static Property Probability = new Property(4, double.class, "probability", false, "PROBABILITY");
        public final static Property Total = new Property(5, int.class, "total", false, "TOTAL");
        public final static Property Orientation = new Property(6, int.class, "orientation", false, "ORIENTATION");
        public final static Property MapId = new Property(7, long.class, "mapId", false, "MAP_ID");
    }

}
