package com.richard.officenavigation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table IBEACON.
 */
public class IBeaconDao extends AbstractDao<IBeacon, Long> {

    public static final String TABLENAME = "IBEACON";
    private Query<IBeacon> iMap_BeaconsQuery;

    ;

    public IBeaconDao(DaoConfig config) {
        super(config);
    }

    public IBeaconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'IBEACON' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'X' INTEGER NOT NULL ," + // 1: x
                "'Y' INTEGER NOT NULL ," + // 2: y
                "'MAP_ID' INTEGER NOT NULL ," + // 3: mapId
                "'UUID' TEXT NOT NULL ," + // 4: uuid
                "'MAJOR' INTEGER NOT NULL ," + // 5: major
                "'MINOR' INTEGER NOT NULL );"); // 6: minor
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IBEACON'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, IBeacon entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getX());
        stmt.bindLong(3, entity.getY());
        stmt.bindLong(4, entity.getMapId());
        stmt.bindString(5, entity.getUuid());
        stmt.bindLong(6, entity.getMajor());
        stmt.bindLong(7, entity.getMinor());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public IBeacon readEntity(Cursor cursor, int offset) {
        IBeacon entity = new IBeacon( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // x
                cursor.getLong(offset + 2), // y
                cursor.getLong(offset + 3), // mapId
                cursor.getString(offset + 4), // uuid
                cursor.getInt(offset + 5), // major
                cursor.getInt(offset + 6) // minor
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, IBeacon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.getLong(offset + 1));
        entity.setY(cursor.getLong(offset + 2));
        entity.setMapId(cursor.getLong(offset + 3));
        entity.setUuid(cursor.getString(offset + 4));
        entity.setMajor(cursor.getInt(offset + 5));
        entity.setMinor(cursor.getInt(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(IBeacon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(IBeacon entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "beacons" to-many relationship of IMap.
     */
    public List<IBeacon> _queryIMap_Beacons(long mapId) {
        synchronized (this) {
            if (iMap_BeaconsQuery == null) {
                QueryBuilder<IBeacon> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MapId.eq(null));
                iMap_BeaconsQuery = queryBuilder.build();
            }
        }
        Query<IBeacon> query = iMap_BeaconsQuery.forCurrentThread();
        query.setParameter(0, mapId);
        return query.list();
    }

    /**
     * Properties of entity IBeacon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property X = new Property(1, long.class, "x", false, "X");
        public final static Property Y = new Property(2, long.class, "y", false, "Y");
        public final static Property MapId = new Property(3, long.class, "mapId", false, "MAP_ID");
        public final static Property Uuid = new Property(4, String.class, "uuid", false, "UUID");
        public final static Property Major = new Property(5, int.class, "major", false, "MAJOR");
        public final static Property Minor = new Property(6, int.class, "minor", false, "MINOR");
    }

}
