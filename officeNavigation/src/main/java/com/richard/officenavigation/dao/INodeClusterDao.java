package com.richard.officenavigation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table INODE_CLUSTER.
 */
public class INodeClusterDao extends AbstractDao<INodeCluster, Long> {

    public static final String TABLENAME = "INODE_CLUSTER";

    public INodeClusterDao(DaoConfig config) {
        super(config);
    }

    ;


    public INodeClusterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'INODE_CLUSTER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NODE_ID' INTEGER NOT NULL ," + // 1: nodeId
                "'ORIENTATION' INTEGER NOT NULL ," + // 2: orientation
                "'CLUSTER_ID' INTEGER NOT NULL );"); // 3: clusterId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INODE_CLUSTER'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, INodeCluster entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNodeId());
        stmt.bindLong(3, entity.getOrientation());
        stmt.bindLong(4, entity.getClusterId());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public INodeCluster readEntity(Cursor cursor, int offset) {
        INodeCluster entity = new INodeCluster( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // nodeId
                cursor.getInt(offset + 2), // orientation
                cursor.getLong(offset + 3) // clusterId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, INodeCluster entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNodeId(cursor.getLong(offset + 1));
        entity.setOrientation(cursor.getInt(offset + 2));
        entity.setClusterId(cursor.getLong(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(INodeCluster entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(INodeCluster entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity INodeCluster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NodeId = new Property(1, long.class, "nodeId", false, "NODE_ID");
        public final static Property Orientation = new Property(2, int.class, "orientation", false, "ORIENTATION");
        public final static Property ClusterId = new Property(3, long.class, "clusterId", false, "CLUSTER_ID");
    }

}
