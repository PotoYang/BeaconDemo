package com.richard.officenavigation.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table IPATH.
 */
public class IPathDao extends AbstractDao<IPath, Long> {

    public static final String TABLENAME = "IPATH";
    private DaoSession daoSession;

    ;
    private Query<IPath> iNode_AdjacenciesQuery;
    private String selectDeep;

    public IPathDao(DaoConfig config) {
        super(config);
    }

    public IPathDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'IPATH' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FROM' INTEGER NOT NULL ," + // 1: from
                "'TO' INTEGER NOT NULL ," + // 2: to
                "'DISTANCE' INTEGER NOT NULL ," + // 3: distance
                "'MAP_ID' INTEGER NOT NULL );"); // 4: mapId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IPATH'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, IPath entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFrom());
        stmt.bindLong(3, entity.getTo());
        stmt.bindLong(4, entity.getDistance());
        stmt.bindLong(5, entity.getMapId());
    }

    @Override
    protected void attachEntity(IPath entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public IPath readEntity(Cursor cursor, int offset) {
        IPath entity = new IPath( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // from
                cursor.getLong(offset + 2), // to
                cursor.getLong(offset + 3), // distance
                cursor.getLong(offset + 4) // mapId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, IPath entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom(cursor.getLong(offset + 1));
        entity.setTo(cursor.getLong(offset + 2));
        entity.setDistance(cursor.getLong(offset + 3));
        entity.setMapId(cursor.getLong(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(IPath entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(IPath entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "adjacencies" to-many relationship of INode.
     */
    public List<IPath> _queryINode_Adjacencies(long from) {
        synchronized (this) {
            if (iNode_AdjacenciesQuery == null) {
                QueryBuilder<IPath> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.From.eq(null));
                iNode_AdjacenciesQuery = queryBuilder.build();
            }
        }
        Query<IPath> query = iNode_AdjacenciesQuery.forCurrentThread();
        query.setParameter(0, from);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getINodeDao().getAllColumns());
            builder.append(" FROM IPATH T");
            builder.append(" LEFT JOIN INODE T0 ON T.'TO'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected IPath loadCurrentDeep(Cursor cursor, boolean lock) {
        IPath entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        INode target = loadCurrentOther(daoSession.getINodeDao(), cursor, offset);
        if (target != null) {
            entity.setTarget(target);
        }

        return entity;
    }

    public IPath loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<IPath> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<IPath> list = new ArrayList<IPath>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<IPath> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<IPath> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity IPath.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From = new Property(1, long.class, "from", false, "FROM");
        public final static Property To = new Property(2, long.class, "to", false, "TO");
        public final static Property Distance = new Property(3, long.class, "distance", false, "DISTANCE");
        public final static Property MapId = new Property(4, long.class, "mapId", false, "MAP_ID");
    }

}
