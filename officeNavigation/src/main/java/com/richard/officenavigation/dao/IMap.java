package com.richard.officenavigation.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table IMAP.
 */
public class IMap {

    private Long id;
    /**
     * Not-null value.
     */
    private String src;
    /**
     * Not-null value.
     */
    private String name;
    private double scale;
    private long width;
    private long height;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient IMapDao myDao;

    private List<INode> nodes;
    private List<IBeacon> beacons;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public IMap() {
    }

    public IMap(Long id) {
        this.id = id;
    }

    public IMap(Long id, String src, String name, double scale, long width, long height) {
        this.id = id;
        this.src = src;
        this.name = name;
        this.scale = scale;
        this.width = width;
        this.height = height;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIMapDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Not-null value.
     */
    public String getSrc() {
        return src;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setSrc(String src) {
        this.src = src;
    }

    /**
     * Not-null value.
     */
    public String getName() {
        return name;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setName(String name) {
        this.name = name;
    }

    public double getScale() {
        return scale;
    }

    public void setScale(double scale) {
        this.scale = scale;
    }

    public long getWidth() {
        return width;
    }

    public void setWidth(long width) {
        this.width = width;
    }

    public long getHeight() {
        return height;
    }

    public void setHeight(long height) {
        this.height = height;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<INode> getNodes() {
        if (nodes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            INodeDao targetDao = daoSession.getINodeDao();
            List<INode> nodesNew = targetDao._queryIMap_Nodes(id);
            synchronized (this) {
                if (nodes == null) {
                    nodes = nodesNew;
                }
            }
        }
        return nodes;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetNodes() {
        nodes = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<IBeacon> getBeacons() {
        if (beacons == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            IBeaconDao targetDao = daoSession.getIBeaconDao();
            List<IBeacon> beaconsNew = targetDao._queryIMap_Beacons(id);
            synchronized (this) {
                if (beacons == null) {
                    beacons = beaconsNew;
                }
            }
        }
        return beacons;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetBeacons() {
        beacons = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
